TESTES UNITARIOS

using GestaodeRotas.classes;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace AppRotas.Tests
{
    public class UnitTest1
    {
        [Fact]

        public void AdicionarRota_DeveAdicionarRotaValida()
        {
            // Arrange
            var gerenciadorRotas = new GerenciadorRotas();

            // Act
            gerenciadorRotas.AdicionarRota(1, "Rota 1");

            // Assert
            Assert.Equal(gerenciadorRotas.BuscarRota(1).Numero, 1);
        }


        [Fact]

        public void AdicionarParada_DeveAdicionarParadaValida()
        {
            // Arrange
            var rota = new Rota(1, "Rota 1");
            var parada = new Parada("Parada 10", TimeSpan.Parse("13:00"), TimeSpan.Parse("14:00"));

            // Act
            rota.AdicionarParada(parada);

            // Assert
            Assert.Contains(parada, rota.paradas);

        }

        [Fact]

        public void AdicionarRota_DeveLancarExcecaoParaRotaDuplicada()
        {
            // Arrange
            var gerenciadorRotas = new GerenciadorRotas();

            // Act
            gerenciadorRotas.AdicionarRota(1, "Rota 1");

            // Assert
            Assert.Throws<InvalidOperationException>(() => gerenciadorRotas.AdicionarRota(1, "Rota 1"));
        }

        [Fact]
        public void RemoverRota_DeveRemoverRotaExistente()
        {
            // Arrange
            var gerenciadorRotas = new GerenciadorRotas();

            // Act
            gerenciadorRotas.AdicionarRota(2, "Rota 2");
            gerenciadorRotas.RemoverRota(2);

            // Assert
            Assert.Empty(gerenciadorRotas.rotas);
        }

        [Fact]

        public void RemoverRota_DeveLancarExcecaoParaRotaInexistente()
        {
            // Arrange
            int numero = 2;
            string nome = "Rota 1";
            var gerenciadorRotas = new GerenciadorRotas();
            gerenciadorRotas.AdicionarRota(numero, nome);

            // Act & Assert
            Assert.Throws<InvalidDataException>(() => gerenciadorRotas.RemoverRota(3));
        }

        [Fact]
        public void RemoverParada_DeveRemoverParadaExistente()
        {
            // Arrange
            var parada = new Parada("Parada 20", TimeSpan.Parse("17:00"), TimeSpan.Parse("18:00"));
            var rota = new Rota(2, "Rota 1");
            rota.AdicionarParada(parada);

            // Act
            rota.RemoverParada("Parada 20");


            //Assert
            Assert.Empty(rota.paradas);

        }


        [Fact]

        public void RemoverParada_DeveLancarExcecaoParaParadaInexistente()
        {
            // Arrange
            var rota = new Rota(2, "Rota 1");

            // Act & Assert
            Assert.Throws<InvalidDataException>(() => rota.RemoverParada("Parada 1"));

        }

        [Fact]
        public void AtualizarNome_DeveAtualizarNomeCorretamente()
        {
            // Arrange
            int numero = 2;
            string nome = "Rota 1";
            var gerenciadorRotas = new GerenciadorRotas();
            gerenciadorRotas.AdicionarRota(numero, nome);

            // Act
            gerenciadorRotas.AtualizarNome(nome, "Rota 66");

            // Assert
            Assert.Equal("Rota 66", gerenciadorRotas.BuscarRota(2).Nome);

        }

        [Fact]
        public void ListarRotas_DeveListarTodasAsRotas()
        {
            //Arrange
            int numero = 4;
            string nome = "Rota 1";
            int numero2 = 44;
            string nome2 = "Rota 66";
            var gerenciadorRotas = new GerenciadorRotas();
            gerenciadorRotas.AdicionarRota(numero, nome);
            gerenciadorRotas.AdicionarRota(numero2, nome2);

            //Act
            List<Rota> rotas = gerenciadorRotas.ListarRotas();

            //Assert
            Assert.Equal(2, rotas.Count);
        }

        public void ListarParadas_DeveListarTodasParadas()
        {
            // Arrange
            string nome = "Parada 1";
            TimeSpan horarioSaida = TimeSpan.Parse("14:00");
            TimeSpan horarioChegada = TimeSpan.Parse("15:00");
            var rota = new Rota(2, "Rota 1");
            var parada = new Parada(nome, horarioSaida, horarioChegada);

            string nome2 = "Parada 2";
            TimeSpan horarioSaida2 = TimeSpan.Parse("15:00");
            TimeSpan horarioChegada2 = TimeSpan.Parse("16:00");
            var parada2 = new Parada(nome2, horarioSaida2, horarioChegada2);

            rota.AdicionarParada(parada);
            rota.AdicionarParada(parada2);

            // Act
            List<string> paradas = rota.ListarParadas();

            // Assert
            Assert.Contains("Nome: Parada 1, Saída: 14:00:00 - Chegada: 15:00:00", paradas);
            Assert.Contains("Nome: Parada 2, Saída: 15:00:00 - Chegada: 16:00:00", paradas);
        }

        [Fact]
        public void BuscarRota_DeveRetornarRotaCorreta()
        {
            // Arrange
            int numero = 66;
            string nome = "Rota 66";
            var gerenciadorRotas = new GerenciadorRotas();
            gerenciadorRotas.AdicionarRota(numero, nome);

            // Act
            var rotaEncontrada = gerenciadorRotas.BuscarRota(numero);

            // Assert
            Assert.Equal(numero, rotaEncontrada.Numero);

        }

        [Fact]
        public void BuscarRota_DeveRetornarNuloParaRotaInexistente()
        {
            // Arrange
            var gerenciadorRotas = new GerenciadorRotas();
            gerenciadorRotas.AdicionarRota(70, "Rota 70");

            // Act
            var rotaEncontrada = gerenciadorRotas.BuscarRota(70);

            // Assert
            Assert.NotNull(rotaEncontrada);
        }

        [Fact]
        public void VerificarConflitos_DeveIdentificarConflitosCorretamente()
        {
            // Arrange
            var gerenciadorRotas = new GerenciadorRotas();

            var rota1 = new Rota(1, "Rota 1");
            rota1.AdicionarParada(new Parada("Parada A", TimeSpan.Parse("13:00"), TimeSpan.Parse("13:30")));
            gerenciadorRotas.rotas.Add(rota1);

            var rota2 = new Rota(2, "Rota 2");
            rota2.AdicionarParada(new Parada("Parada A", TimeSpan.Parse("13:15"), TimeSpan.Parse("13:45")));
            gerenciadorRotas.rotas.Add(rota2);

            // Act
            bool conflitos = gerenciadorRotas.VerificarConflitos();

            // Assert
            Assert.True(conflitos);
        }


        [Fact]
        public void VerificarConflitos_AposRemoverRota_DeveRetornarFalso()
        {
            // Arrange
            var gerenciadorRotas = new GerenciadorRotas();

            var rota1 = new Rota(1, "Rota 1");
            var rota2 = new Rota(2, "Rota 2");

            var parada1 = new Parada("Parada 1", TimeSpan.Parse("13:00"), TimeSpan.Parse("14:00"));
            var parada2 = new Parada("Parada 1", TimeSpan.Parse("13:10"), TimeSpan.Parse("14:00"));

            rota1.AdicionarParada(parada1);
            rota2.AdicionarParada(parada2);

            gerenciadorRotas.AdicionarRota(1, "Rota 1");
            gerenciadorRotas.AdicionarRota(2, "Rota 2");


            rota2.RemoverParada("Parada 1");

            // Act
            bool conflitos = gerenciadorRotas.VerificarConflitos();

            // Assert
            Assert.False(conflitos);
        }

    }
}